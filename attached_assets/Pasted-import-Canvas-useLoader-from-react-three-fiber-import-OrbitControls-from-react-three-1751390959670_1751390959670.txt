import { Canvas, useLoader } from "@react-three/fiber";
import { OrbitControls } from "@react-three/drei";
import { useEffect, useState } from "react";
import * as THREE from "three";
import Silo from "./components/Silo";

const fetchDadosSensores = async (abortController) => {
    try {
        // const response = await fetch("http://172.16.1.85:3333/termometria/140/-1", { signal: abortController.signal });
        // const response = await fetch("http://172.16.1.85:3333/termometria/101/369", { signal: abortController.signal });
        const response = await fetch("http://172.16.1.85:3333/termometria/101/962", { signal: abortController.signal });
        // const response = await fetch("http://172.16.1.85:3333/termometria/101/-1", { signal: abortController.signal });
        if (!response.ok) throw new Error("Erro ao buscar dados");
        const data = await response.json();
        return data || {};
    } catch (error) {
        if (error.name !== "AbortError") {
            console.error("Erro ao buscar dados:", error);
        }
        return {};
    }
};

export default function Modelo3D({ aoClicarCabo }) {
    const [dados, setDados] = useState({});

    useEffect(() => {
        const abortController = new AbortController();

        const carregarDados = async () => {
            const novosDados = await fetchDadosSensores(abortController);
            // console.log("Dados recebidos:", novosDados);
            setDados(novosDados);
        };

        carregarDados();
        const interval = setInterval(carregarDados, 5000);

        return () => {
            clearInterval(interval);
            abortController.abort();
        };
    }, []);

    // Carregar textura corretamente usando useLoader
    let texturaFundo;
    try {
        texturaFundo = useLoader(THREE.TextureLoader, "/texturas/fundoAzul.jpg");
        if (texturaFundo) {
            texturaFundo.mapping = THREE.EquirectangularReflectionMapping;
            texturaFundo.wrapS = THREE.RepeatWrapping;
            texturaFundo.wrapT = THREE.RepeatWrapping;
            texturaFundo.minFilter = THREE.LinearFilter;
        }
    } catch (error) {
        console.warn("Erro ao carregar textura de fundo:", error);
    }

    return (
        <Canvas
            camera={{ position: [90, 45, 15], fov: 50, near: 0.1, far: 1000 }}
            gl={{ localClippingEnabled: true }}
        >
            <ambientLight intensity={0.5} />
            <directionalLight position={[2, 5, 2]} />

            {/* Fundo esf√©rico com textura */}
            {texturaFundo && (
                <mesh scale={[-1, 1, 1]}>
                    <sphereGeometry args={[500, 60, 40]} />
                    <meshBasicMaterial map={texturaFundo} side={THREE.BackSide} />
                </mesh>
            )}

            {/* Passamos os dados para o Silo, incluindo o layout */}
            {dados?.dados && (
                // <Silo
                //     altura={15}
                //     alturaTopo={3}
                //     raio={7}
                //     dadosSensores={dados?.leitura || {}} // üîπ Evita erro se `leitura` for undefined
                //     layout={dados?.dados?.layout || ""}
                // />

                <Silo
                    altura={15}
                    alturaTopo={3}
                    raio={7}
                    dadosSensores={dados?.leitura || {}}
                    layout={dados?.dados?.layout || ""}
                    aoClicarCabo={aoClicarCabo}
                />

            )}

            <OrbitControls enableZoom={true} minDistance={1} maxDistance={50} />
        </Canvas>
    );
}
