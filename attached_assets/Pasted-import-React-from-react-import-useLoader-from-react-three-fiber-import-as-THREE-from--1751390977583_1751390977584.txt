import React from "react";
import { useLoader } from "@react-three/fiber";
import * as THREE from "three";
import Cabos from "./Cabos";
import NivelGrao from "./NivelGrao";
import modelosSilo from "../config/modelosSilo";
import { Billboard, Text } from "@react-three/drei";

// Função para calcular as dimensões do silo
function calcularDimensoesSilo(config, espacamento = 1.5, margemAltura = 1, margemLateral = 2) {
    const sensorCentral = Math.max(...config.num_sensores);
    const alturaCalculada = sensorCentral * espacamento + margemAltura;
    const matchCabos = config.cabos.match(/(\d+)\s*L/);
    const qtdCabos = matchCabos ? parseInt(matchCabos[1]) : 5;

    // Mantém a altura conforme sensores e aumenta a largura proporcionalmente aos cabos
    const multiplicador = qtdCabos / 5; // 5 é o mínimo
    const raioBase = 7; // ajuste conforme necessário
    const raioCalculado = (raioBase * multiplicador) + margemLateral;

    return { alturaCalculada, raioCalculado };
}


const Silo = ({ dadosSensores, layout, aoClicarCabo }) => {
    const configModelo = modelosSilo[layout];
    if (!configModelo) return null;
    const { alturaCalculada, raioCalculado } = calcularDimensoesSilo(configModelo);
    const alturaTopo = 2; // Altura do topo/chapéu
    const texturaTopo = useLoader(THREE.TextureLoader, "/texturas/texturaTopo.jpg");

    return (
        <group position={[0, -alturaCalculada / 2, 0]}>
            <ambientLight intensity={0.5} />
            <pointLight position={[0, alturaCalculada / 2, 0]} intensity={1.2} decay={2} />
            <spotLight position={[0, alturaCalculada + alturaTopo, 0]} angle={0.8} penumbra={0.5} intensity={1.5} castShadow />

            {/* Corpo do silo (Lateral) */}
            <mesh position={[0, alturaCalculada / 2, 0]}>
                <cylinderGeometry args={[raioCalculado, raioCalculado, alturaCalculada, 64, 1, true]} />
                <meshStandardMaterial
                    color="gray"
                    transparent
                    opacity={0.2}
                    renderOrder={1}
                    depthWrite={false}
                    side={THREE.DoubleSide}
                />
            </mesh>

            {/* Renderização dos cabos */}
            {dadosSensores && Object.keys(dadosSensores).length > 0 && (
                <Cabos dadosSensores={dadosSensores} alturaSilo={alturaCalculada} layout={layout} aoClicarCabo={aoClicarCabo} />
            )}

            {/* Topo do silo */}
            <mesh position={[0, alturaCalculada + alturaTopo / 2.10, 0]}>
                <cylinderGeometry args={[raioCalculado * 0.15, raioCalculado * 1.05, alturaTopo, 64, 1, true]} />
                <meshStandardMaterial map={texturaTopo} side={THREE.FrontSide} />
            </mesh>
            <mesh position={[0, alturaCalculada + alturaTopo / 2.10, 0]}>
                <cylinderGeometry args={[raioCalculado * 0.15, raioCalculado * 1.05, alturaTopo, 64, 1, true]} />
                <meshStandardMaterial map={texturaTopo} side={THREE.BackSide} />
            </mesh>

            {/* Nível de grãos */}
            <NivelGrao
                dadosSensores={dadosSensores}
                alturaSilo={alturaCalculada}
                raio={raioCalculado}
                layout={layout}
                position={[0, alturaCalculada * 0.5, 0]}
            />

            {/* Exaustor do silo (parte superior) */}
            <group position={[0, alturaCalculada + alturaTopo * 0.97, 0]}>
                <mesh>
                    <cylinderGeometry args={[raioCalculado * 0.18, raioCalculado * 0.18, 0.2, 22]} />
                    <meshStandardMaterial color="gray" />
                </mesh>
                <mesh position={[0, 0.15, 0]}>
                    <cylinderGeometry args={[raioCalculado * 0.1, raioCalculado * 0.1, 0.2, 32]} />
                    <meshStandardMaterial color="gray" />
                </mesh>
            </group>

            {/* Chão do silo */}
            <mesh position={[0, 0, 0]}>
                <cylinderGeometry args={[raioCalculado * 1.05, raioCalculado * 1.05, 0.2, 64]} />
                <meshStandardMaterial color="#666666" />
            </mesh>


        </group>
    );
};

export default Silo;
